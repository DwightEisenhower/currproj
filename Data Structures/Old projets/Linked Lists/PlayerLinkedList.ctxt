#BlueJ class context
comment0.target=PlayerLinkedList
comment0.text=Look\ in\ the\ ReadMe\ for\ info\ on\ this\ project\ *
comment1.params=
comment1.target=void\ temp()
comment1.text=Updated\ count\ of\ players\ in\ PLL\ *
comment2.params=toAdd
comment2.target=void\ newPlayer(Player)
comment2.text=\#\n\ Use\ this\ method\ to\ add\ a\ new\ player\ to\ the\ END\ of\ the\ PLL.\ \n
comment3.params=
comment3.target=void\ removePlayer()
comment3.text=\#\n\ Remove\ from\ the\ PLL\ the\ player\ who\ has\ the\ fewest\ wins.\ In\ the\ event\ of\ a\ tie,\ you\ may\n\ remove\ ANY\ single\ player\ who\ has\ the\ fewest\ wins.\ It\ does\ not\ need\ to\ be\ random\ amongst\ those\n\ players.\n\ \n\ If\ you\ end\ up\ removing\ the\ head\ player\ or\ starting\ player,\ set\ the\ next\ player\ in\ the\ PLL\ to\n\ be\ the\ head\ or\ starting\ respectively.\ Head\ and\ starting\ should\ always\ be\ assigned\ unless\ the\n\ PLL\ is\ empty.\n\ \n\ Print\ the\ name\ of\ the\ removed\ player.\n
comment4.params=
comment4.target=void\ newStartingPlayer()
comment4.text=\#\n\ Randomly\ select\ a\ new\ starting\ player.\ The\ current\ starting\ player\ may\ be\ selected\ again.\ The\n\ random\ choice\ should\ be\ fair.\n\ \n\ Print\ the\ name\ of\ the\ new\ starting\ player.\n
comment5.params=
comment5.target=void\ playRound()
comment5.text=\#\n\ Simulate\ a\ round\ of\ the\ game\ by\ calling\ each\ player's\ takeTurn()\ method\ once,\ in\ order,\ starting\n\ with\ the\ starting\ player.\ Indicate\ with\ Round\ Starting\ and\ Round\ Ending\ print\ statements.\n
comment6.params=
comment6.target=java.lang.String\ getWinner()
comment6.text=\#\n\ Return\ the\ name\ of\ the\ winner\ if\ there\ is\ one\ player\ left\ in\ the\ PLL\ or\ return\ an\ error\ if\n\ there\ is\ not\ winner.\n
comment7.params=
comment7.target=int\ size()
comment7.text=\#\n\ Return\ the\ number\ of\ players\ in\ the\ PLL.\n
comment8.params=
comment8.target=java.lang.String\ toString()
comment8.text=\#\n\ No\ other\ standard\ class\ functionality\ needed.\n
numComments=9
